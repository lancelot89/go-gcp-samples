name: Go CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24.6'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint for v1-cloud-run
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: v1-cloud-run
          args: --timeout=5m

      - name: Run golangci-lint for v2-firestore
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: v2-firestore
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [v1-cloud-run, v2-firestore]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run tests for ${{ matrix.module }}
        run: |
          cd ${{ matrix.module }}
          go mod download
          go test -v -short -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          file: ./${{ matrix.module }}/coverage.out
          flags: ${{ matrix.module }}
          name: ${{ matrix.module }}-coverage

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        module: [v1-cloud-run, v2-firestore]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build ${{ matrix.module }}
        run: |
          cd ${{ matrix.module }}
          go mod download
          go build -v ./...

  # Integration test with Firestore emulator can be enabled later when needed
  # integration-test:
  #   name: Integration Test
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   if: github.event_name == 'pull_request'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'